//orignal2.0
//#include<SFML/Graphics.hpp>
#include<iostream>
#include<fstream>
#include<sstream>
#include<cstdlib>
using namespace std;

class student {
protected:
    string name;
    string rollnum;
    int age;
    int marks;
    string attendance;
    int contact;
    string courses;    string coursen;// the new course student wants to register
    string att;//new attendnce

public:

    student() {
        name = " ";
        rollnum = " ";
        courses = " ";
        marks = 0;
        attendance = " ";
        contact = 0;
        age = 0;
        coursen = " ";
        att = " ";
    }

    student(string name1, int agee, int markss, int rollnumm, int contactt, int attendancee, int coursess) {
        name = name1;
        rollnum = rollnumm;
        contact = contactt;
        age = agee;
        courses = coursess;
        marks = markss;
        attendance = attendancee;
    }

    student(const student& obj) {
        name = obj.name;
        rollnum = obj.rollnum;
        age = obj.age;
        marks = obj.marks;
        contact = obj.contact;
        attendance = obj.attendance;
        courses = obj.courses;
    }

    ~student() {}

    void add(const string& filename) {
        ofstream outfile(filename, ios::app);
        if (!outfile.is_open()) {
            cout << "File not opened\n";
        }
        cout << endl;

        cout << "enter students detail: " << endl;
        cin.ignore();
        cout << "name: ";
        getline(cin, name);
        cout << "rollnum: ";
        getline(cin, rollnum);
        cout << "age: ";
        cin >> age;
        cout << "marks: ";
        cin >> marks;
        cout << "contact: ";
        cin >> contact;
        cout << "enter courses separated by commas:";
        cin.ignore();
        getline(cin, courses);
        cout << "enter attendance for each course respectively separated by commas: ";
        getline(cin, attendance);


        outfile << rollnum << "\t\t" << name << "\t\t" << age << "\t\t" << contact << "\t\t" << marks << "\t\t" << courses << "\t\t" << attendance << endl;
        outfile.close();
    }

    void display() {
        cout << endl << endl << "**______________ENROLLED STUDENTS DATA______________**" << endl << endl;

        ifstream file("textt.txt");

        if (!file.is_open()) {
            cout << "Error: File not open" << endl;
            return;
        }

        char character;
        while (file.get(character)) {
            cout << character;
        }

        file.close();
    }
    void displaycourse() {
        cout << endl << endl << "**______________COURSES DATA______________**" << endl << endl;

        ifstream file("withdraw.txt");

        if (!file.is_open()) {
            cout << "Error: File not open" << endl;
            return;
        }

        char character;
        while (file.get(character)) {
            cout << character;
        }

        file.close();
    }


    void remove() {
        string rn;
        cout << "Enter the rollnum which you want to remove" << endl;
        cin.ignore();
        getline(cin,rn);
        if (rn.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }

        ifstream file("textt.txt");
        if (!file.is_open()) {
            cout << "file not opened" << endl;
        }

        ofstream outfile("temp.txt");
        if (!outfile.is_open()) {
            cout << "file not opened" << endl;
        }

        bool f1 = false;
        string write;
        getline(file, write);
        outfile << write << endl;

        while (getline(file, write)) {
            istringstream c(write);
            string roll;
            if (c >> roll) {
                if (roll == rn) {
                    f1 = true;
                    continue;
                }
            }
            outfile << write << endl;
        }
        file.close();
        outfile.close();

        if (f1) {
            if (std::remove("textt.txt") != 0) {
                cout << "Error, file cannot be deleted" << endl;
            }
            if (rename("temp.txt", "textt.txt") != 0) {
                cout << "Error, file cannot be renamed" << endl;
            }
            else {
                cout << "Student removed successfully" << endl;
            }
        }
    }
    //if we want to remove from other files too
   /* void remove(const string& filename) {
        string rn;
        cout << "Enter the rollnum which you want to remove" << endl;
        cin.ignore();
        getline(cin, rn);
        if (rn.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }

        ifstream file(filename);
        if (!file.is_open()) {
            cout << "file not opened" << endl;
            return;
        }

        ofstream outfile("temp.txt");
        if (!outfile.is_open()) {
            cout << "file not opened" << endl;
            file.close();
            return;
        }

        bool studentFound = false;
        string write;
        getline(file, write);
        outfile << write << endl;

        while (getline(file, write)) {
            istringstream c(write);
            string roll;
            if (c >> roll) {
                if (roll == rn) {
                    studentFound = true;
                    continue;
                }
            }
            outfile << write << endl;
        }
        file.close();
        outfile.close();

        if (studentFound) {
            if (std::remove(filename.c_str()) != 0) {
                cout << "Error, file cannot be deleted" << endl;
            }
            if (rename("temp.txt", filename.c_str()) != 0) {
                cout << "Error, file cannot be renamed" << endl;
            }
            else {
                cout << "Student removed successfully from " << filename << endl;
            }
        }
        else {
            cout << "Student with rollnum " << rn << " not found in " << filename << endl;
        }
    }*/

    void edit() {
        string oldRoll;
        cout << "Enter the current roll number of the student you want to edit: ";
        cin.ignore();
        getline(cin, oldRoll);
        if (oldRoll.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }

        ifstream file("textt.txt");
        if (!file.is_open()) {
            cout << "File not opened" << endl;
            return;
        }

        ofstream tempfile("temp.txt");
        if (!tempfile.is_open()) {
            cout << "File not opened" << endl;
            file.close();
            return;
        }

        bool found = false;
        string write;

        while (getline(file, write)) {
            istringstream c(write);
            string roll;
            if (c >> roll) {
                if (roll == oldRoll) {
                    found = true;

                    cout << "Current information for student with roll number " << oldRoll << ":" << endl;
                    cout << write << endl;

                    int age, marks, contact;
                    string name, courses, attendance, rollnum;

                    cout << "Enter student's details: " << endl;
                  
                    cout << "name: ";
                    getline(cin, name);
                    cout << "rollnum: ";
                    getline(cin, rollnum);
                    cout << "age: ";
                    cin >> age;
                    cout << "marks: ";
                    cin >> marks;
                    cout << "contact: ";
                    cin >> contact;
                    cout << "enter courses separated by commas:";
                    cin.ignore(); // Ignore any newline characters in the input buffer
                    getline(cin, courses);
                    cout << "enter attendance for each course respectively separated by commas: ";
                    getline(cin, attendance);

                    // Write modified information to the temporary file
                    tempfile << rollnum << "\t\t" << name << "\t\t" << age << "\t\t" << contact << "\t\t" << marks << "\t\t" << courses << "\t\t" << attendance << endl;
                }
                else {
                    // Write unchanged information to the temporary file
                    tempfile << write << endl;
                }
            }
            else {
                // Write unchanged information to the temporary file
                tempfile << write << endl;
            }
        }

        file.close();
        tempfile.close();

        if (!found) {
            cout << "Student with roll number " << oldRoll << " not found" << endl;
            std::remove("temp.txt"); // Delete the temporary file
        }
        else {
            // Replace the original file with the temporary file
            if (std::remove("textt.txt") != 0) {
                cout << "Error: File cannot be deleted" << endl;
            }
            if (rename("temp.txt", "textt.txt") != 0) {
                cout << "Error: File cannot be renamed" << endl;
            }
            else {
                cout << "Student information updated successfully" << endl;
            }
        }
    }
    
    void courseregister() {
        string oldRoll;
        cin.ignore();
        cout << "Enter the roll number of student to register courses ";
        getline(cin, oldRoll);
        if (oldRoll.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }

        ifstream file("withdraw.txt");
        if (!file.is_open()) {
            cout << "File not opened" << endl;
            return;
        }

        ofstream tempfile("temp.txt");
        if (!tempfile.is_open()) {
            cout << "File not opened" << endl;
            file.close();
            return;
        }

        bool found = false;
        string write;
        if (getline(file, write)) {
            tempfile << write << endl;
        }

        while (getline(file, write)) {
            istringstream c(write);
            string roll;
            if (c >> roll) {
                if (roll == oldRoll) {
                    found = true;

                    cout << "Current information for student with roll number " << oldRoll << ":" << endl;
                    cout << write << endl;

                    int age, marks, contact;
                    string name, courses, rollnum, attendance;

                    cout << "Enter name of courses: ";
                    getline(cin, coursen);
                    
                     // Write modified information to the temporary file
                    tempfile << write << coursen << endl;
                }
                else {
                    // Write unchanged information to the temporary file
                    tempfile << write << endl;
                }
            }
        }

        file.close();
        tempfile.close();

        if (!found) {
            cout << "Student with roll number " << oldRoll << " not found" << endl;
            std::remove("temp.txt");  // Delete the temporary file
        }
        else {
            // Replace the original file with the temporary file
            if (std::remove("withdraw.txt") != 0) {
                cout << "Error: File cannot be deleted" << endl;
            }
            if (rename("temp.txt", "withdraw.txt") != 0) {
                cout << "Error: File cannot be renamed" << endl;
            }
            else {
                cout << "Student information updated successfully" << endl;
            }
        }
    }
    void displaymarks() {
        cout << endl << endl << "**_______________MARKS DATA______________**" << endl << endl;

        ifstream file("marks.txt");

        if (!file.is_open()) {
            cout << "Error: File not open" << endl;
            return;
        }

        char character;
        while (file.get(character)) {
            cout << character;
        }

        file.close();
    }
    void assignmarks() {


        string oldRollm, mark;
        cin.ignore();
        cout << "Enter the roll number of the student for assigning marks: ";
        getline(cin, oldRollm);
        if (oldRollm.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }
        ifstream file("marks.txt");
        if (!file.is_open()) {
            cout << "File not opened" << endl;
            return;
        }

        ofstream tempfile("temp.txt");
        if (!tempfile.is_open()) {
            cout << "File not opened" << endl;
            file.close();
            return;
        }

        bool found = false;
        string write;
        // Read and write the header line
        getline(file, write);
        tempfile << write << endl;


        while (getline(file, write)) {
            istringstream c(write);
            string roll, name, courses, rollnum, marks;

            // Declare variables for age, contact, and marks
            int age, contact;

            if (c >> roll >> name >> age >> contact >> courses >> marks) {
                if (roll == oldRollm) {
                    found = true;

                    cout << "Current information for student with roll number " << oldRollm << ":" << endl;
                    cout << write << endl;


                    cout << "Enter new marks for each course respectively separated by commas: ";
                    getline(cin, mark);

                    // Append modified information to the temporary file
                    tempfile << roll << "\t\t" << name << "\t\t" << age << "\t\t" << contact << "\t\t\t" << courses << "\t\t\t" << mark << endl;
                }
                else {
                    // Write unchanged information to the temporary file
                    tempfile << write << endl;
                }
            }
        }

        file.close();
        tempfile.close();

        if (!found) {
            cout << "Student with roll number " << oldRollm << " not found" << endl;
            std::remove("temp.txt");  // Delete the temporary file
        }
        else {
            // Replace the original file with the temporary file
            if (std::remove("marks.txt") != 0) {
                cout << "Error: File cannot be deleted" << endl;
            }
            if (rename("temp.txt", "marks.txt") != 0) {
                cout << "Error: File cannot be renamed" << endl;
            }
            else {
                cout << "Student information updated successfully" << endl;
            }
        }

    }
    void MarksMenu() {
        int k = 0;
        while (k != 3) {
            cout << endl;
            cout << "**__________________MARKS MENU__________________**" << endl;
            cout << "1.display marks" << endl;
            cout << "2.assign marks" << endl;
            cout << "3.back" << endl;

            cout << "Please enter the choice" << endl;
            cin >> k;

            switch (k) {          
            case 1:
                displaymarks();
                break;
            case 2:
                displaymarks();
                assignmarks();
                displaymarks();
                break;
            case 3:
                cout << "Exiting Marks menu......" << endl;
                break;
            default:
                cout << "Invalid key, try again" << endl;
                break;
            }
        }
    }
    void studentEnrollmentMenu() {
        int k = 0;

        while (k != 5) {
            cout << endl;
            cout << "**__________________STUDENT ENROLLMENT__________________**" << endl;
            cout << "1.Add new student" << endl;
            cout << "2.Remove student" << endl;
            cout << "3.Edit student info" << endl;
            cout << "4.register course" << endl;
            cout << "5.Exit" << endl;

            cout << "Please enter the choice" << endl;
            cin >> k;

            switch (k) {
            case 1:
                display();
                add("textt.txt");
                display();
                break;
            case 2:
                display();
                remove();
                display();
                break;
            case 3:
                display();
                edit();
                display();
                break;
            case 4:
                displaycourse();
                courseregister();
                displaycourse();
                break;
            case 5:
                cout << "Exiting student enrollment menu......" << endl;
                break;
            default:
                cout << "Invalid key, try again" << endl;
                break;
            }
        }
    }
};
class Course :public student {
private:
    string code;
    string cname;
    string instructor;
    int credits;
    int capacity;
    int students[50];  // Array to store student roll numbers
    int numEnrolled;  // Number of students currently enrolled
    string rollc; //roll number of students enrolled
    string coursen;//the new course student wants to register

public:
    Course() {
        code = "";
        cname = "";
        instructor = "";
        credits = 0;
        capacity = 0;
        numEnrolled = 0;
        rollc = " ";
        coursen = " ";
    }
    Course(string codee, string cnamee, string instructorr, int creditss, int capacityy) {
        code = codee;
        cname = cnamee;
        instructor = instructorr;
        credits = creditss;
        capacity = capacityy;
    }

    void displayc() {
        cout << endl << endl << "**______________courses DATA______________**" << endl << endl;

        ifstream file("courses.txt");

        if (!file.is_open()) {
            cout << "Error: File not open" << endl;
            return;
        }

        char character;
        while (file.get(character)) {
            cout << character;
        }

        file.close();
    }
    
    void courseadd() {
        ofstream outfile("courses.txt", ios::app);
        if (!outfile.is_open()) {
            cout << "File not opened\n";
        }

        cout << "enter course detail: " << endl;
        cin.ignore();
        cout << "Course name: ";
        getline(cin, cname);
        cout << "Course code: ";
        getline(cin, code);
        cout << "credits: ";
        cin >> credits;
        cin.ignore();
        cout << "Instructor: ";
        getline(cin, instructor);
        cout << "enter students roll numbers ";
        getline(cin, rollc);
        outfile << code << "\t\t" << cname << "\t\t\t" << credits << "\t\t\t" << instructor << "\t\t" << rollc << endl;
        outfile.close();
    }

    void editc() {
        string oldcode;
        cout << "Enter the course code of the course you want to edit: ";
        cin.ignore();
        getline(cin, oldcode);

        ifstream file("courses.txt");
        if (!file.is_open()) {
            cout << "Error: Unable to open courses.txt" << endl;
            return;
        }

        ofstream tempfile("temp.txt");
        if (!tempfile.is_open()) {
            cout << "Error: Unable to open tempfile.txt" << endl;
            file.close();
            return;
        }

        bool found = false;
        string write;

        while (getline(file, write)) {
            istringstream c(write);
            string code;
            if (c >> code) {
                if (code == oldcode) {
                    found = true;

                    cout << "Current information for the course " << oldcode << ":" << endl;
                    cout << write << endl;

                    string cname, instructor, rollc;
                    int credits;

                    cout << "Enter new course code: ";
                    getline(cin, code);
                    cout << "Enter new course name: ";
                    cin.ignore();
                    getline(cin, cname);
                    cout << "Enter new credits: ";
                    cin >> credits;
                    cout << "Enter new instructor name: ";
                    cin.ignore();
                    getline(cin, instructor);
                    cout << "Enter new students: ";
                    getline(cin, rollc);

                    // Write modified information to the temporary file
                    tempfile << code << "\t \t" << cname << "\t\t" << credits << "\t" << instructor << "\t\t" << rollc << endl;
                }
                else {
                    // Write unchanged information to the temporary file
                    tempfile << write << endl;
                }
            }
        }

        file.close();
        tempfile.close();

        if (!found) {
            cout << "Course with code " << oldcode << " not found" << endl;
            std::remove("temp.txt");  // Delete the temporary file
        }
        else {
            // Replace the original file with the temporary file
            if (std::remove("courses.txt") != 0) {
                cout << "Error: Unable to delete courses.txt" << endl;
            }
            if (rename("temp.txt", "courses.txt") != 0) {
                cout << "Error: Unable to rename tempfile.txt to courses.txt" << endl;
            }
            else {
                cout << "Course information updated successfully" << endl;
            }
        }
    }
    void courseregister() {
        string oldRoll;
        cin.ignore();
        cout << "Enter the roll number of student to register courses ";
        getline(cin, oldRoll);
        if (oldRoll.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }

        ifstream file("withdraw.txt");
        if (!file.is_open()) {
            cout << "File not opened" << endl;
            return;
        }

        ofstream tempfile("temp.txt");
        if (!tempfile.is_open()) {
            cout << "File not opened" << endl;
            file.close();
            return;
        }

        bool found = false;
        string write;
        if (getline(file, write)) {
            tempfile << write << endl;
        }

        while (getline(file, write)) {
            istringstream c(write);
            string roll;
            if (c >> roll) {
                if (roll == oldRoll) {
                    found = true;

                    cout << "Current information for student with roll number " << oldRoll << ":" << endl;
                    cout << write << endl;

                    int age, marks, contact;
                    string name, courses, rollnum, attendance;

                    cout << "Enter name of courses: ";
                    getline(cin, coursen);
                     // Write modified information to the temporary file
                    tempfile << write << coursen << endl;
                }
                else {
                    // Write unchanged information to the temporary file
                    tempfile << write << endl;
                }
            }
        }

        file.close();
        tempfile.close();

        if (!found) {
            cout << "Student with roll number " << oldRoll << " not found" << endl;
            std::remove("temp.txt");  // Delete the temporary file
        }
        else {
            // Replace the original file with the temporary file
            if (std::remove("withdraw.txt") != 0) {
                cout << "Error: File cannot be deleted" << endl;
            }
            if (rename("temp.txt", "withdraw.txt") != 0) {
                cout << "Error: File cannot be renamed" << endl;
            }
            else {
                cout << "Student information updated successfully" << endl;
            }
        }
    }

    void coursewithdraw() {

        string oldRoll;
        cout << "Enter the current roll number of the student to withdraw course: ";
        cin.ignore();
        getline(cin, oldRoll);
        if (oldRoll.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }

        ifstream file("withdraw.txt");
        if (!file.is_open()) {
            cout << "File not opened" << endl;
            return;
        }

        ofstream tempfile("temp.txt");
        if (!tempfile.is_open()) {
            cout << "File not opened" << endl;
            file.close();
            return;
        }

        bool found = false;
        string write;

        while (getline(file, write)) {
            istringstream c(write);
            string roll;
            if (c >> roll) {
                if (roll == oldRoll) {
                    found = true;

                    cout << "Current information for student with roll number " << oldRoll << ":" << endl;
                    cout << write << endl;

                    int age, marks, contact;
                    string name, courses, rollnum;

                    // Extract information from the existing record
                    c >> name >> age >> marks >> contact >> rollnum >> ws;

                    // Read the courses until the end of the line
                    getline(c, courses);

                    // Prompt the user to enter the course to remove
                    string courseToRemove;
                    cout << "Enter the course to remove: ";
                    getline(cin, courseToRemove);

                    // Find and remove the specified course as a substring
                    size_t pos = courses.find(courseToRemove);
                    while (pos != string::npos) {
                        courses.erase(pos, courseToRemove.length());
                        pos = courses.find(courseToRemove);
                    }

                    // Reconstruct the line with the modified courses and write to the temporary file
                    tempfile << roll << "\t\t" << name << "\t\t" << age << "\t\t" << marks << "\t\t" << contact << "\t\t" << courses << endl;
                }
                else {
                    // Write unchanged information to the temporary file
                    tempfile << write << endl;
                }
            }
        }

        file.close();
        tempfile.close();

        if (!found) {
            cout << "Student with roll number " << oldRoll << " not found" << endl;
            std::remove("temp.txt"); // Delete the temporary file
        }
        else {
            // Replace the original file with the temporary file
            if (std::remove("withdraw.txt") != 0) {
                cout << "Error: File cannot be deleted" << endl;
            }
            if (rename("temp.txt", "withdraw.txt") != 0) {
                cout << "Error: File cannot be renamed" << endl;
            }
            else {
                cout << "Student information updated successfully" << endl;
            }
        }
    }
    void withdrawmenu() {
        int k = 0;

        while (k != 3) {
            cout << endl;
            cout << "**__________________Course Withdrawl__________________**" << endl;
            cout << "1.enrolled courses" << endl;
            cout << "2.drop a course" << endl;
            cout << "3.exit" << endl;

            cout << "Please enter the choice" << endl;
            cin >> k;

            switch (k) {
            case 1:

                displaycourse();
                break;
            case 2:
                displaycourse();
                coursewithdraw();
                displaycourse();
                break;
            case 3:
                cout << "Exiting course withdrawal menu......" << endl;
                break;
            default:
                cout << "Invalid key, try again" << endl;
                break;
            }
        }
    }
    void CourseMenu() {
        int k = 0;

        while (k != 5) {
            cout << endl;
            cout << "**__________________Course Registration__________________**" << endl;
            cout << "1.Available courses" << endl;
            cout << "2.Add course" << endl;
            cout << "3.edit course details" << endl;
            cout << "4.register a course" << endl;
            cout << "5.exit" << endl;
            cout << "Please enter the choice" << endl;
            cin >> k;

            switch (k) {
            case 1:

                displayc();
                break;
            case 2:
                courseadd();
                displayc();
                break;
            case 3:

                displayc();
                editc();
                displayc();
                break;
            case 4:

                displaycourse();
                courseregister();
                displaycourse();
                break;
            case 5:
                cout << "Exiting course registration menu......" << endl;
                break;
            default:
                cout << "Invalid key, try again" << endl;
                break;
            }
        }
    }
};
class attendance :public student, public Course {

public:
    attendance(){}
    void displaya() {
        cout << endl << endl << "**______________Attendance DATA______________**" << endl << endl;

        ifstream file("atext.txt");

        if (!file.is_open()) {
            cout << "Error: File not open" << endl;
            return;
        }

        string line;
        while (getline(file, line)) {
            cout << line << endl;
        }

        file.close();
    }

    void MarkAttendance() {
        string oldRolla, att;
        cin.ignore();
        cout << "Enter the roll number of the student for attendance: ";
        getline(cin, oldRolla);
        if (oldRolla.size() > 4) {
            cout << "Error: Roll number should not exceed four digits." << endl;
            return;
        }


        ifstream file("atext.txt");
        if (!file.is_open()) {
            cout << "File not opened" << endl;
            return;
        }

        ofstream tempfile("temp.txt");
        if (!tempfile.is_open()) {
            cout << "File not opened" << endl;
            file.close();
            return;
        }

        bool found = false;
        string write;

        // Read and write the header line
        getline(file, write);
        tempfile << write << endl;

        while (getline(file, write)) {
            istringstream c(write);
            string roll, name, courses, rollnum, attendance;

            // Declare variables for age, contact, and marks
            int age, contact;

            if (c >> roll >> name >> age >> contact >> courses >> attendance) {
                if (roll == oldRolla) {
                    found = true;

                    cout << "Current information for student with roll number " << oldRolla << ":" << endl;
                    cout << write << endl;

                    cout << "Enter new attendance for each course respectively separated by commas: ";
                    getline(cin, att);

                    // Preserve unchanged information and only modify attendance
                    tempfile << roll << "\t\t" << name << "\t\t" << age << "\t\t" << contact << "\t\t\t" << courses << "\t\t\t" << att << "\t\t" << endl;

                }
                else {
                    // Write unchanged information to the temporary file
                    tempfile << write << endl;
                }
            }
        }

        file.close();
        tempfile.close();

        if (!found) {
            cout << "Student with roll number " << oldRolla << " not found" << endl;
            std::remove("temp.txt"); // Delete the temporary file
        }
        else {
            // Replace the original file with the temporary file
            if (std::remove("atext.txt") != 0) {
                cout << "Error: File cannot be deleted" << endl;
            }
            if (rename("temp.txt", "atext.txt") != 0) {
                cout << "Error: File cannot be renamed" << endl;
            }
            else {
                cout << "Student information updated successfully" << endl;
            }
        }
    }
    void AttendanceMenu() {
        int k = 0;

        while (k != 3) {
           
            cout << endl;
            cout << "**__________________ATTENDANCE__________________**" << endl;
            cout << "1.display attendance" << endl;
            cout << "2.mark attendance" << endl;
            cout << "3.back" << endl;

            cout << "Please enter the choice" << endl;
            cin >> k;

            switch (k) {
            case 1:

                displaya();
                break;
            case 2:
                displaya();
                MarkAttendance();
                displaya();
                break;
            case 3:
                cout << "Exiting attendance menu......" << endl;
                break;
            default:
                cout << "Invalid key, try again" << endl;
                break;
            }
        }
    }

};
   
class SystemManager {
private:
    student studentObj;
    Course courseObj;
    attendance attendanceObj;

public:
    SystemManager() {
    }

    void SystemMenu() {
        int key = 0;

        while (key != 6) {
            cout << "**_________________MAIN MENU_________________**" << endl;
            cout << endl;
            cout << "1.Enrollment" << endl;
            cout << "2.Course registration" << endl;
            cout << "3.Attendance" << endl;
            cout << "4.Marks" << endl;
            cout << "5.Course withdrawal" << endl;
            cout << "6.Exit" << endl;

            cout << endl << "Please enter the key: " << endl;
            cin >> key;
            cout << endl;



            switch (key) {
            case 1:
                studentObj.studentEnrollmentMenu();
                break;
            case 2:
                courseObj.CourseMenu();
                break;
            case 3:
                attendanceObj.AttendanceMenu();
                break;


            case 4:
                studentObj.MarksMenu();
                break;
            case 5:
                courseObj.withdrawmenu();
                break;
            case 6:
                cout << "Exiting program......" << endl;
                break;
            default:
                cout << "Invalid key, try again" << endl;
                break;
            }
        }
    }


};
class FileHandler {
private:
    string filename;
    ios_base::openmode mode;
    string* data;
    size_t dataSize;

public:
    FileHandler(const string& filename, ios_base::openmode mode) : filename(filename), mode(mode), data(nullptr), dataSize(0) {}
    ~FileHandler() {
        delete[] data;
    }

    // Method to open the file
    bool openFile() {
        ifstream file(filename, mode);
        if (!file.is_open()) {
            cout << "Error: Unable to open the file '" << filename << "'" << endl;
            return false;
        }

        // Read the file into a dynamic array
        string line;
        while (getline(file, line)) {
            addData(line);
        }

        file.close();
        return true;
    }

    // Method to close the file
    void closeFile() {
        // it's automatically closed when the ifstream or ofstream goes out of scope
    }

    // Method to write data to the file
    void writeToFile() {
        ofstream file(filename, mode);
        if (!file.is_open()) {
             cout<< "Error: Unable to open the file '" << filename << "'" << endl;
            return;
        }

        // Write the data array to the file
        for (size_t i = 0; i < dataSize; ++i) {
            file << data[i] << '\n';
        }

        file.close();
    }

    // Method to read data from the file
    void printData() const {
        for (size_t i = 0; i < dataSize; ++i) {
           cout << data[i] <<endl;
        }
    }

    // Method to add data to the dynamic array
    void addData(const string& line) {
        // Create a new dynamic array with increased size
        string* newData = new string[dataSize + 1];

        // Copy existing data to the new array
        for (size_t i = 0; i < dataSize; ++i) {
            newData[i] = data[i];
        }

        // Add the new line
        newData[dataSize] = line;

        // Delete the old array and update the pointer
        delete[] data;
        data = newData;

        // Increment the size
        ++dataSize;
    }
};
template <typename T>
class Validator {
private:
    T input;
    bool (*typeValidator)(const T&);
    bool (*lengthValidator)(const T&);

public:
    Validator(const T& input_value, bool (*type_validator)(const T&), bool (*length_validator)(const T&))
        : input(input_value), typeValidator(type_validator), lengthValidator(length_validator) {}

    bool validate() const {
        return typeValidator(input) && lengthValidator(input);
    }


    // Example type validator for string
    bool isStringTypeValid(const string& input) {

        return true;
    }

    // Example length validator for string
    bool isStringLengthValid(const string& input) {

        return input.length() >= 3 && input.length() <= 10;
    }
};
   int main()
    {
       ////sfml
    //    sf::Font a;
    //    a.loadFromFile("Coffee.ttf");

    //    // create the window
    //    sf::RenderWindow window(sf::VideoMode(800, 900), "My flex");
    //    sf::Text t, t1, t2, t3, t4, t31, t32, t33, t34, t35, t36, t37;
    //    t.setFont(a);
    //    t.setFillColor(sf::Color::Blue);
    //    t.setPosition(300, 100);
    //    t.setCharacterSize(60);
    //    t.setString("FLEX");

    //    t1.setFont(a);
    //    t1.setFillColor(sf::Color::Blue);
    //    t1.setPosition(250, 160);
    //    t1.setCharacterSize(30);
    //    t1.setString("academic portal");

    //    t2.setFont(a);
    //    t2.setFillColor(sf::Color::Black);
    //    t2.setPosition(150, 245);
    //    t2.setCharacterSize(20);
    //    t2.setString("Roll No.:");

    //    t3.setFont(a);
    //    t3.setFillColor(sf::Color::Black);
    //    t3.setPosition(130, 330);
    //    t3.setCharacterSize(20);
    //    t3.setString("Password:");

    //    sf::RectangleShape rectangle(sf::Vector2f(300.f, 30.f));
    //    rectangle.setFillColor(sf::Color::Yellow);
    //    rectangle.setPosition(230.f, 250.f);

    //    sf::RectangleShape rectangle1(sf::Vector2f(300.f, 30.f));
    //    rectangle1.setFillColor(sf::Color::Yellow);
    //    rectangle1.setPosition(230.f, 330.f);


    //    t4.setFont(a);
    //    t4.setFillColor(sf::Color::Red);
    //    t4.setPosition(130, 430);
    //    t4.setCharacterSize(17);
    //    t4.setString("MAIN MENU:");

    //    t31.setFont(a);
    //    t31.setFillColor(sf::Color::Black);
    //    t31.setPosition(130, 480);
    //    t31.setCharacterSize(17);
    //    t31.setString("1.ENROLLMENT:");

    //    t32.setFont(a);
    //    t32.setFillColor(sf::Color::Black);
    //    t32.setPosition(130, 530);
    //    t32.setCharacterSize(17);
    //    t32.setString("2.COURSE REGISTRATION:");

    //    t33.setFont(a);
    //    t33.setFillColor(sf::Color::Black);
    //    t33.setPosition(130, 580);
    //    t33.setCharacterSize(17);
    //    t33.setString("3.ATTENDANCE:");

    //    t34.setFont(a);
    //    t34.setFillColor(sf::Color::Black);
    //    t34.setPosition(130, 630);
    //    t34.setCharacterSize(17);
    //    t34.setString("4.MARKS:");

    //    t35.setFont(a);
    //    t35.setFillColor(sf::Color::Black);
    //    t35.setPosition(130, 680);
    //    t35.setCharacterSize(17);
    //    t35.setString("5.COURSE WITHDRAWAL:");

    //    t36.setFont(a);
    //    t36.setFillColor(sf::Color::Black);
    //    t36.setPosition(130, 730);
    //    t36.setCharacterSize(17);
    //    t36.setString("6.EXIT:");


    //    t37.setFont(a);
    //    t37.setFillColor(sf::Color::Black);
    //    t37.setPosition(130, 780);
    //    t37.setCharacterSize(17);
    //    t37.setString("PLEASE ENTER CHOICE:");

    //    // run the program as long as the window is open
    //    while (window.isOpen())
    //    {
    //        // check all the window's events that were triggered since the last iteration of the loop
    //        sf::Event event;
    //        while (window.pollEvent(event))
    //        {
    //            // "close requested" event: we close the window
    //            if (event.type == sf::Event::Closed)
    //                window.close();
    //        }

    //        // clear the window with white color
    //        window.clear(sf::Color::White);
    //        window.draw(t);
    //        window.draw(t1);
    //        window.draw(t2);
    //        window.draw(t3);
    //        window.draw(rectangle);
    //        window.draw(rectangle1);
    //        window.draw(t4);
    //        window.draw(t31);
    //        window.draw(t32);
    //        window.draw(t33);
    //        window.draw(t34);
    //        window.draw(t35);
    //        window.draw(t36);
    //        window.draw(t37);
    //        // end the current frame
    //        window.display();
    //    }

    //    return 0;
    //}
    SystemManager obj;
    obj.SystemMenu();

    //FileHandler fileHandler("withdraw.txt", ios::in);
    //// Open the file
    ////if (fileHandler.openFile()) {
    ////    // Print the data from the file
    ////    cout << "Data from the file:" << endl;
    ////    fileHandler.printData();

    ////    // Modify the data 
    ////    fileHandler.addData("New line added.");

    ////    // Write the modified data back to the file
    ////    fileHandler.writeToFile();

    ////    // Close the file 
    ////    fileHandler.closeFile();
    ////}
  /*  cout << "Enter a string: ";
    string user_input;
    cin >> user_input;


    Validator<string>validator(
        user_input,
        isStringTypeValid,
        isStringLengthValid
    );

    if (validator.validate()) {
        std::cout << "Input is valid." << std::endl;
    }
    else {
        std::cout << "Input is invalid." << std::endl;
    }*/


    return 0;
}

